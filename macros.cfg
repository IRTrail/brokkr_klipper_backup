#####################################################################
# 	Print Start
#####################################################################

[gcode_macro START_PRINT]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
description: Start up routine
gcode:
    # Temperature parsing from slicer
    {% set BED_TEMP = params.BED_TEMP|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}
    {% set EXTRUDER_MIN_TEMP = printer.configfile.settings.extruder.min_extrude_temp|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(40)|int %}
    {% set PAUSE_AFTER_HEAT = params.PAUSE_AFTER_HEAT|default(1)|int %}

    # Begin start routine
    CLEAR_PAUSE
    BED_MESH_CLEAR
    
    ### Set temps
    M140 S{BED_TEMP}                 ; set bed temperature
    M104 S{EXTRUDER_MIN_TEMP}        ; set extruder temp (Wait until after z calibration to save problems.)
    G21                              ; set units to millimeters
    G90                              ; use absolute coordinates
    M83                              ; use relative distances for extrusion
    
    ### Preheat
    SET_DISPLAY_TEXT MSG="Waiting for champer temperature."
    BEDFANSMED
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBER_TEMP}
    
    ### Home if necessary - Happy Hare auto homes, so this is redundant if not using Happy Hare
    {% if "xyz" not in printer.toolhead.homed_axes %}
      STATUS_HOMING
      SET_DISPLAY_TEXT MSG="Homing All Axes"
      G28
      UPDATE_DELAYED_GCODE ID=clear_display DURATION=0
    {% endif %}

    ### Nozzle clean and QGL
    SET_DISPLAY_TEXT MSG="Cleaning Nozzle"
    STATUS_CLEANING
    CLEAN_NOZZLE
    SET_DISPLAY_TEXT MSG="Leveling Bed"
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    SET_DISPLAY_TEXT MSG="Leveling Complete."
    G28 Z0
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=0

    ### Adaptive bed mesh and send it
    BED_MESH_CALIBRATE ADAPTIVE=1      ; adaptive bed meshing

    ### Park and final heating
    G1 Z20 F3000                     ; move nozzle away from bed
    G1 X150 Y350 F12000              ; move nozzle to purge bucket to keep from oozing on bed
    STATUS_BUSY
    STATUS_BED_HEATING
    SET_DISPLAY_TEXT MSG="Heating."
    M109 S{EXTRUDER_TEMP}            ; hold temperature
    M190 S{BED_TEMP}                 ; hold temperature

    ### Optional pause after heating is complete
    {% if PAUSE_AFTER_HEAT == 1 %}
        PAUSE
    {% endif %}
    SET_DISPLAY_TEXT MSG="Printing."
    STATUS_PRINTING
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=10

#####################################################################
# 	Nozzle Prime
#####################################################################
[gcode_macro NOZZLE_PRIME]
# primes the nozzle.
description: Purge nozzle before print
gcode:
    SET_DISPLAY_TEXT MSG="Priming Nozzle."
    G92 E0                           ; Reset Extruder
    G0 X1.5 Y1.5 Z10 F30000
    G1 X1.5 Y1.5 Z2.0 F4000          ; move z up little to prevent scratching of surface
    G1 X1.5 Y1.5 Z0.6 F10000         ; move to start-line position
    G1 X151.5 Y1.5 Z0.6 F1500 E40.   ; draw 1st line
    G1 E-0.75 F1800                  ; retract filament
    G92 E0                           ; reset extruder
    G1 Z2.0 F3000                    ; move z up little to prevent scratching of surface
    SET_DISPLAY_TEXT MSG="Nozzle Prime Complete."
#####################################################################
# 	Print End
#####################################################################
[gcode_macro END_PRINT]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
description: Ending routine
gcode:
    {% set pending_save = printer.configfile.save_config_pending %}
    
    M400                           ; wait for buffer to clear
    G91                            ; relative positioning
    ;G0 Z1.00 X20.0 Y20.0 F10000    ; move nozzle to remove stringing
    G92 E0                       ; zero the extruder
    G1 E-1.0 F300                ; retract to prevent oozing
    BED_MESH_CLEAR
    TURN_OFF_HEATERS
    BedFansOff
    M107                           ; turn off fan
    G91                            ; relative positioning
    ;G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X175 Y350 F3600            ; park nozzle at rear
    SET_DISPLAY_TEXT MSG="Print Complete."
    STATUS_PART_READY
    UPDATE_DELAYED_GCODE ID=lights_out DURATION=3600
    {% if pending_save is true %}
      SET_DISPLAY_TEXT MSG="Saving config."
      Z_OFFSET_APPLY_PROBE
      SAVE_CONFIG
    {% endif %}

#####################################################################
# 	Nozzle Clean
#####################################################################
[gcode_macro CLEAN_NOZZLE]
variable_start_x: 150
variable_start_y: 350
variable_z_clearing: 20
variable_rapid_speed: 200
variable_start_z: 2.0
variable_wipe_dist: -50
variable_wipe_qty: 20
variable_wipe_spd: 500
variable_raise_distance: 20

gcode:
  {% set ext_temp = printer.configfile.settings.extruder.min_extrude_temp|float %}
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  # Warm up the hotend a bit to make it clean easier.
  {% if not printer.extruder.can_extrude %}
    M109 S{ext_temp}
  {% endif %}
  G90                                            ; absolute positioning
  ## Move nozzle to start position
  G1 X{start_x} Y{start_y} Z{z_clearing} F{rapid_speed * 60}
  G1 Z{start_z} F1500

  ## Wipe nozzle
  {% for wipes in range(1, (wipe_qty + 1)) %}
    M204 S10000
    G1 X{start_x + wipe_dist} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
  {% endfor %}

  ## Raise nozzle
  G1 Z{raise_distance} F1500

#####################################################################
# 	MMU Auxiliary Macros
#####################################################################
[gcode_macro GATE_COLOR]
description: Sets gate colors to slicer colors in Klipperscreen.
gcode:
    {% set COLORS = params.COLORS|default("")|string %}
    {% set colors = COLORS.split(",") %}
    {% set ttg_map = printer.mmu.ttg_map %}

    {% for color in colors %}
        {% set tool = loop.index0 %}
        {% set gate = ttg_map[tool] %}                  # Make sure map to correct gate in case of TTG map
        MMU_GATE_MAP GATE={gate} COLOR={color}          # Register the filament color against correct gate in gate map
    {% endfor %}

#####################################################################
# 	Miscellaneous
#####################################################################
[delayed_gcode clear_display]
gcode:
    SET_DISPLAY_TEXT

[delayed_gcode lights_out]
gcode:
    STATUS_OFF

[gcode_macro AUTO_BED_MESH]
description: Calibrates the bed mesh, saves, then restarts
gcode:
    G32
    CLEAN_NOZZLE
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE SAVE=default
    BED_MESH_OUTPUT PGP=1
    SAVE_CONFIG

[gcode_macro FRONT_AND_CENTER]
description: Moves the tool head to the front for easy filament or nozzle changes
gcode:
    SET_DISPLAY_TEXT MSG="Ready."
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28
    {% endif %}
    G90
    G1 X175 Y0 Z200 F18000
    STATUS_READY

[gcode_macro EXTRUDER_PID]
description: Calls the extruder PID tune routine using T for temp. Default is 260
gcode:
    {% set T = params.T|default(260)|int %}
    PID_CALIBRATE HEATER=extruder TARGET={T}

[gcode_macro BED_PID]
description: Calls the bed PID tune routine using T for temp. Default is 105
gcode:
    {% set T = params.T|default(105)|int %}
    PID_CALIBRATE HEATER=heater_bed TARGET={T}  

[gcode_macro listvars]
description: Lists per-macro variables with a name containing SEARCH. This is 
  useful for debugging macros by allowing you to probe printer state. Be very
  careful, however, as an overly broad SEARCH parameter can take a long time
  to process and potentially hang or crash klipper.
  Usage: LISTVARS SEARCH=<search_string>
gcode:

  {% if 'SEARCH' not in params and 'S' not in params %}
    { action_raise_error("Must provide a SEARCH parameter.") }
  {% endif %}
  {% set SEARCH = params.SEARCH|default(params.S)|lower %}
  {% set ns = namespace() %}
  {% set output = [] %}
  {% for item in printer %}
    {% if ' ' in item %}
      {% set ns.path = ['printer', "['%s']" % (item), ''] %}
    {% else %}
      {% set ns.path = ['printer.', item, ''] %}
    {% endif %}

    {% if SEARCH in ns.path|lower %}
      {% set dummy = output.append(ns.path|join) %}
    {% endif %}

    {% if printer[item].items() %}
      {% for childkey, child in printer[item].items() recursive %}
          {% set ns.path = ns.path[:loop.depth|int + 1] %}
          {% if ' ' in childkey %}
            {% set null = ns.path.append("['%s']" % (childkey)) %}
          {% else %}
            {% set null = ns.path.append(".%s" % (childkey)) %}
          {% endif %}

          {% if child is mapping  %}
            {loop(child.items())}
          {% else %}
            {% if SEARCH in ns.path|lower %}
              {% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
            {% endif %}
          {% endif %}
        {% endfor %}
    {% endif %}
  {% endfor %}
  { action_respond_info(output|join("\n")) }